package org.parceler;

import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public final class Parcels
{
  public static final String IMPL_EXT = "Parcelable";
  private static final NullParcelable NULL_PARCELABLE;
  public static final String PARCELS_NAME = "Parcels";
  public static final String PARCELS_PACKAGE = "org.parceler";
  public static final String PARCELS_REPOSITORY_NAME = "Parceler$$Parcels";
  private static final ParcelCodeRepository REPOSITORY = new ParcelCodeRepository();
  
  static
  {
    NULL_PARCELABLE = new NullParcelable(null);
    REPOSITORY.loadRepository(NonParcelRepository.getInstance());
  }
  
  public static <T> T unwrap(Parcelable paramParcelable)
  {
    if (paramParcelable == null) {
      return null;
    }
    return (T)((ParcelWrapper)paramParcelable).getParcel();
  }
  
  protected static void update(ClassLoader paramClassLoader)
  {
    REPOSITORY.loadRepository(paramClassLoader);
  }
  
  public static <T> Parcelable wrap(Class<? extends T> paramClass, T paramT)
  {
    if (paramT == null) {
      return NULL_PARCELABLE;
    }
    return REPOSITORY.get(paramClass).buildParcelable(paramT);
  }
  
  public static <T> Parcelable wrap(T paramT)
  {
    if (paramT == null) {
      return NULL_PARCELABLE;
    }
    return wrap(paramT.getClass(), paramT);
  }
  
  public static class NullParcelable
    implements Parcelable, ParcelWrapper<Object>
  {
    public static final NullParcelableCreator CREATOR = new NullParcelableCreator(null);
    
    private NullParcelable() {}
    
    private NullParcelable(Parcel paramParcel) {}
    
    public int describeContents()
    {
      return 0;
    }
    
    public Object getParcel()
    {
      return null;
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt) {}
    
    private static final class NullParcelableCreator
      implements Parcelable.Creator<Parcels.NullParcelable>
    {
      public Parcels.NullParcelable createFromParcel(Parcel paramParcel)
      {
        return new Parcels.NullParcelable(paramParcel, null);
      }
      
      public Parcels.NullParcelable[] newArray(int paramInt)
      {
        return new Parcels.NullParcelable[paramInt];
      }
    }
  }
  
  private static final class ParcelCodeRepository
  {
    private ConcurrentMap<Class, Parcels.ParcelableFactory> generatedMap = new ConcurrentHashMap();
    
    public ParcelCodeRepository()
    {
      loadRepository(getClass().getClassLoader());
    }
    
    private static String buildParcelableImplName(Class paramClass)
    {
      return paramClass.getName() + "$$" + "Parcelable";
    }
    
    public Parcels.ParcelableFactory findClass(Class paramClass)
    {
      try
      {
        paramClass = new Parcels.ParcelableFactoryReflectionProxy(paramClass, Class.forName(buildParcelableImplName(paramClass)));
        return paramClass;
      }
      catch (ClassNotFoundException paramClass) {}
      return null;
    }
    
    public Parcels.ParcelableFactory get(Class paramClass)
    {
      Parcels.ParcelableFactory localParcelableFactory = (Parcels.ParcelableFactory)this.generatedMap.get(paramClass);
      Object localObject = localParcelableFactory;
      if (localParcelableFactory == null)
      {
        localParcelableFactory = findClass(paramClass);
        if (localParcelableFactory == null) {
          throw new ParcelerRuntimeException("Unable to find generated Parcelable class for " + paramClass.getName() + ", verify that your class is configured properly and that the Parcelable class " + buildParcelableImplName(paramClass) + " is generated by Parceler.");
        }
        paramClass = (Parcels.ParcelableFactory)this.generatedMap.putIfAbsent(paramClass, localParcelableFactory);
        localObject = paramClass;
        if (paramClass == null) {
          localObject = localParcelableFactory;
        }
      }
      return (Parcels.ParcelableFactory)localObject;
    }
    
    public void loadRepository(ClassLoader paramClassLoader)
    {
      try
      {
        loadRepository((Repository)paramClassLoader.loadClass("org.parceler.Parceler$$Parcels").newInstance());
        return;
      }
      catch (InstantiationException paramClassLoader)
      {
        throw new ParcelerRuntimeException("Unable to instantiate generated Repository", paramClassLoader);
      }
      catch (IllegalAccessException paramClassLoader)
      {
        throw new ParcelerRuntimeException("Unable to access generated Repository", paramClassLoader);
      }
      catch (ClassNotFoundException paramClassLoader) {}
    }
    
    public void loadRepository(Repository<Parcels.ParcelableFactory> paramRepository)
    {
      this.generatedMap.putAll(paramRepository.get());
    }
  }
  
  public static abstract interface ParcelableFactory<T>
  {
    public static final String BUILD_PARCELABLE = "buildParcelable";
    
    public abstract Parcelable buildParcelable(T paramT);
  }
  
  private static final class ParcelableFactoryReflectionProxy<T>
    implements Parcels.ParcelableFactory<T>
  {
    private final Constructor<? extends Parcelable> constructor;
    
    public ParcelableFactoryReflectionProxy(Class<T> paramClass, Class<? extends Parcelable> paramClass1)
    {
      try
      {
        this.constructor = paramClass1.getConstructor(new Class[] { paramClass });
        return;
      }
      catch (NoSuchMethodException paramClass)
      {
        throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", paramClass);
      }
    }
    
    public Parcelable buildParcelable(T paramT)
    {
      try
      {
        paramT = (Parcelable)this.constructor.newInstance(new Object[] { paramT });
        return paramT;
      }
      catch (InstantiationException paramT)
      {
        throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", paramT);
      }
      catch (IllegalAccessException paramT)
      {
        throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", paramT);
      }
      catch (InvocationTargetException paramT)
      {
        throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", paramT);
      }
    }
  }
}


/* Location:              /Users/michael/Downloads/dex2jar-2.0/GO_JEK.jar!/org/parceler/Parcels.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */